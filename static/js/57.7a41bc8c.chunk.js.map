{"version":3,"sources":["../../../src/ColorPicker/index.tsx"],"names":["this"],"mappings":"0uBAQA,cAAE,SAAF,IAAI,IAAJ,0C,OAOM,EAAJ,MAA0B,CAClB,sBAAgB,GAKxB,6BAA6B,SAAC,GACxB,EAAK,MAAM,cACb,EAAK,MAAM,eAEb,EAAK,SAAS,CAAE,sBAAuB,EAAK,MAAM,wBAGpD,WAA+B,SAAC,GAC9B,SAAK,MAAM,UAAY,EAAK,MAAM,SAAS,EAAE,MAE/C,uBAA2C,SAAC,GAC1C,SAAK,MAAM,kBAAoB,EAAK,MAAM,iBAAiB,EAAE,M,EAgDjE,OAxE0B,OA0BtB,EAAF,4BAAI,IAAJ,OACM,OACF,gBAAC,WAAc,KACb,gBAAC,IAAM,CACL,UAAW,SAAC,GACV,EAAK,SAAW,GAElB,QAAQ,YACR,QAAS,KAAK,2BACd,MACE,OACK,KAAK,MAAM,OAAK,CACnB,YAAa,YAAc,KAAK,MAAM,OACtC,YAAa,QACb,YAAa,SAKhB,KAAK,MAAM,cACX,KAAK,MAAM,MAEd,gBAAC,IAAO,CACA,KAAAA,KAAK,MAAM,qBACX,SAAI,KAAK,SACf,QAAS,KAAK,2BACR,aAAQ,CACJ,SAAE,MACV,WAAY,UAER,gBAAW,CACf,SAAU,SACV,WAAY,WAGd,2BACE,gBAAC,eAAY,CACX,MAAO,KAAK,MAAM,MAClB,SAAU,KAAK,SACf,iBAAkB,KAAK,2BAhE5B,eAA0C,CAC3C,cAAW,eACf,KAAM,gBAAC,IAAY,CAAC,MAAO,CAAE,WAAY,MAAO,SAAU,WAqE9D,EAxEA,CAA0B,aA0EX","file":"static/js/57.7a41bc8c.chunk.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport ColorizeIcon from '@material-ui/icons/Colorize';\nimport * as React from 'react';\nimport { ChromePicker } from 'react-color';\nimport { colorToString } from './colorToString';\nvar ColorPicker = /** @class */ (function (_super) {\n    __extends(ColorPicker, _super);\n    function ColorPicker() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isColorPickerVisible: false,\n        };\n        _this.handleClickShowColorPicker = function (e) {\n            if (_this.props.onDialogOpen) {\n                _this.props.onDialogOpen();\n            }\n            _this.setState({ isColorPickerVisible: !_this.state.isColorPickerVisible });\n        };\n        _this.onChange = function (e) {\n            return _this.props.onChange && _this.props.onChange(e.rgb);\n        };\n        _this.handleChangeComplete = function (e) {\n            return _this.props.onChangeComplete && _this.props.onChangeComplete(e.rgb);\n        };\n        return _this;\n    }\n    ColorPicker.prototype.render = function () {\n        var _this = this;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Button, { buttonRef: function (node) {\n                    _this.anchorEl = node;\n                }, variant: \"contained\", onClick: this.handleClickShowColorPicker, style: __assign(__assign({}, this.props.style), { borderColor: colorToString(this.props.color), borderStyle: 'solid', borderWidth: '2px' }) },\n                this.props.buttonContent,\n                this.props.icon),\n            React.createElement(Popover, { open: this.state.isColorPickerVisible, anchorEl: this.anchorEl, onClose: this.handleClickShowColorPicker, anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'center',\n                }, transformOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                } },\n                React.createElement(\"div\", null,\n                    React.createElement(ChromePicker, { color: this.props.color, onChange: this.onChange, onChangeComplete: this.handleChangeComplete })))));\n    };\n    ColorPicker.defaultProps = {\n        buttonContent: 'Change color',\n        icon: React.createElement(ColorizeIcon, { style: { marginLeft: '4px', fontSize: '19px' } }),\n    };\n    return ColorPicker;\n}(React.Component));\nexport default ColorPicker;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}