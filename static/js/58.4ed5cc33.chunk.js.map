{"version":3,"sources":["../../packages/ui/node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js","../../../src/ThemeProvider/index.tsx","../../../src/ThemeProvider/themeOptions.tsx"],"names":["ThemeProvider","props","children","localTheme","theme","outerTheme","useTheme","React","useMemo","output","_extends","mergeOuterLocalTheme","nested","createElement","ThemeContext","Provider","value"],"mappings":"gOAuEeA,MAzCf,SAAuBC,GACrB,IAAIC,EAAWD,EAAMC,SACjBC,EAAaF,EAAMG,MACnBC,EAAaC,cAQbF,EAAQG,IAAMC,SAAQ,WACxB,IAAIC,EAAwB,OAAfJ,EAAsBF,EAlCvC,SAA8BE,EAAYF,GACxC,MAA0B,oBAAfA,EACSA,EAAWE,GAWxBK,YAASA,YAAS,GAAIL,GAAaF,GAqBQQ,CAAqBN,EAAYF,GAMjF,OAJc,MAAVM,IACFA,EAAOG,KAAyB,OAAfP,GAGZI,IACN,CAACN,EAAYE,IAChB,OAAoBE,IAAMM,cAAcC,IAAaC,SAAU,CAC7DC,MAAOZ,GACNF,I,8YCxCC,EAAoB,YAAwB,CAChD,eAAe,EACf,iBAAkB,QAEd,EAAQ,YCf4B,IDqB1C,cAAE,SAAF,I,+CAUE,OAV0B,OAC1B,8BACE,OACE,gBAAC,IAAc,CAAC,aAAa,EAAM,kBAAmB,GACpD,gBAAC,EAAuB,CAAC,MAAO,KAAK,MAAM,OAAS,GACjD,KAAK,MAAM,YAKtB,EAVA,CAA4B,aAYb","file":"static/js/58.4ed5cc33.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends(_extends({}, outerTheme), localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider as MaterialUiThemeProvider, StylesProvider, } from '@material-ui/styles';\nimport { createGenerateClassName } from '@material-ui/styles';\nimport darkTheme from './DarkTheme/index';\nimport { themeOptions } from './themeOptions';\nexport { darkTheme };\nvar generateClassName = createGenerateClassName({\n    disableGlobal: true,\n    productionPrefix: 'ory',\n});\nvar theme = createMuiTheme(themeOptions);\nvar ThemeProvider = /** @class */ (function (_super) {\n    __extends(ThemeProvider, _super);\n    function ThemeProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ThemeProvider.prototype.render = function () {\n        return (React.createElement(StylesProvider, { injectFirst: true, generateClassName: generateClassName },\n            React.createElement(MaterialUiThemeProvider, { theme: this.props.theme || theme }, this.props.children)));\n    };\n    return ThemeProvider;\n}(React.Component));\nexport default ThemeProvider;\n//# sourceMappingURL=index.js.map","export var themeOptions = {};\n//# sourceMappingURL=themeOptions.js.map"],"sourceRoot":""}